Work plan:

1) Each developer will try working with the givven environment
learn the basics, develop a very simple web application according to a tutorial from youtube or something.
Recall all concepts and technologies we studied in class.
Even better is also fully understand thow to use git and gitHub.

form 10.01.2016        to 14.01.2016

2) on 15.01.2016
we will open a project "beResponse" in eclipse on a single computer,
start writing some code together, make a gitHub repository
and open two separate branches on different computers.
Then we"ll do furture planning of who is doing what.

11.02.2016

DONE Learn carefully stackoverflow html and design
DONE Search for video tutorials about bootstrap design and watch them DONE build design for the folowing
	DONE Question-mini
	DONE User mini (for LeaderBoard)
	DONE Question Submission page
	DONE User profile page 
	* UI-Operation pages 
DONE Watch Angular-JS videos	
DONE Build javascript that can get an html element and build a array of those dynamically
DONE Learn how take data from database and get it inside the app using JS and tools we learned


17/02/2016 Design
DONE registration page:
- Single question page ( Like in StackOverflow
and also what is written above...

25/02/2016

object definition:
	Question, Answer, User, Topic, 

fields definition:

	Question: {
		int questionId
		String title
		String text
		String Date
		String Time

		int userId
		String nickName
		String userPhotoUrl

		int votingScore //Skolko raz progolosovali
		float answersAverage
		float rating
		
		Array answers[]
		Array topics[]
	}

	Answer: {
		int answerId;
		String text;
		String Date;
		String Time;
		int questionId;

		int userId
		String nickName
		String userPhotoUrl

		int rating
	}

	UserMini: {
		int userId
		String nickName
		String userPhotoUrl
		Array topics[]
		float rating		
		int submittedQuestionsNumber;
		float submittedQuewtionsAverage;
		int submittedAnswersNumber;
		float submittedAnswersAverage;
	}

	User: {
		int userId
		String username
		String password
		String nickName
		String desctription
		String userPhotoUrl;
		Array topics[]

		float rating	
		int submittedQuestionsNumber;
		float submittedQuewtionsAverage;
		int submittedAnswersNumber;
		float submittedAnswersAverage;

		Array lastAskedQuestions[]
		Array lastAnsweredQuestions[]
		Array lastAnswers[]
	}

	Topic: {
		int topicID
		String: topicName
		float: rating
		int userID // User 0 is the system
	}

User Events:

OnRateQuestion(Question,voterId,sign){ // sign = -1 or +1
	if(question.userId == voterId)( 
			Alert(" :( Taak ne deeeeelaetsaa!!! ");
	)
	float change = 0.2*sign;
	question.votingScore+=sign;
	question.rating += change;
	question.topic[ALL].rating += change;

	User user = Database.getUserById(question.userId);
	user.submittedQuestionsAverage += (change/user.submittedQuestionsNumber);
	user.rating+=0.2*(change/user.submittedQuestionsNumber);
}
This event affects:
	 - 	list of tomics (most popular topics): No need in immediate request, client-side sending regular message about question rating change
	 -  order of exiting questions can change - request for exiting questions array
Question Rate request to server {questioId,sign}

OnRateAnswer(Question,Answer,voterID,sign){ 
	if(answer.userId == voterId)(
			Alert(" :( Taak ne deeeeelaetsaa!!! ");
	)
	answer.rating += sign;	
	question.answersAverage += sign/question.answers[].length;
	question.rating += 0.8 * sign/question.answers[].length;

	question.topic[ALL].rating += 0.8 * sign/question.answers[].length;
	
	User user = Database.getUserById(question.userId);
	user.submittedQuestionAvarage += 0.8*(sign/question.answers[].length)/user.dubmittedQuestionNumber;
	user.rating += 0.2*(0.8*(sign/question.answers[].length))/user.dubmittedQuestionNumber);
	Array topics[] = Database.getAllUserTOpics(answer.userId);
	topics[ALL who refer to this question].rating+=sign;

	User ansUser = Database.getUserById(answer.userId);
	ansUser.submittedAnswerAverage += sign/submitedAnsw4erNumber;
	ansUser.rating += (sign/submitedAnsw4erNumber)*0.8;
}
This event affects:
	 -	leaderBoard (immediate new request) // no eto poxuy po skolku mi ego ne gruzim
	 - 	list of tomics (most popular topics): No need in immediate request, client-side sending regular message about question rating change
	 -  order of exiting answers can change - request for exiting answers array
	 -  order of exiting questions can change - request for exiting questions array
Answer Rate request to server {answerId,sign}

submitQuestion - Request{title,text,date,time,userId,topics} 
submitQuestion - Response{Question}

Answer - Request{text,date,time,userId,questionId}
Answer - Response(Answer)

Get20UsersToLeaderBoard - Request {}
Get20UsersToLeaderBoard - Response {Array users[20]}

Get20newQuestions - Request {page-number}
Get20newQuestions - Response {Array questions[20]}

Get20TopRatedQuestions - Request {page-number}
Get20TopRatedQuestions - Response {Array questions[20]}

Get5LastAskedQuestions - Request {}
Get5LastAskedQuestions - Response {Array questions[5]}

Get5LastAnsweredQuestions - Request {}
Get5LastAnsweredQuestions - Response {Array questions[5], Array answers[5]}

Get20MostPopularTopics - Request {page-nubmer}
Get20MostPopularTopics - Request {Array topice[20]}

Signin - Request {username, password} //after all the "cosmetic" checks
signIn - Response {UserMini};

Register - Request{username,nickname,password,description,userPhotoUrl};
Register - Response{UserMini};

Get20QuestionsByTopic - Request{topicId,page-number}
Get20QuestionsByTopic - Response {Array questions[20]}

26/02/2016

Actions: 
1)	Homepage - new submitted questions view
		template : questions-list.html
2)  Ask your question - Ask question form
		template : ask-your.html
3)  Browse existing questions sorted by rating 
		template : questions-list.html
4)  Leaderboard
		template : leaderboard.html
5)  Questions by topics  - list of topics will be shown
		template : topics-list.html

Events: 
101) On topic click - A list of questions related to that hopic will appear
		template : questions-list.html
102) On user click - User profile page will appear
		template : user-profile.html
103) On question click - The current question profile will appear
		template : question-full.html
104) On Reply click - Reply form will appear

Furture plan:
	 DONE MAke the QuestionListCtrl ready for getting info from server by RESTful API
	 DONE Make the AskNewCtrl ready for adding new question to Database
	 DONE Replace all #/links to HTML5 format
	 - Manage a place to hold the current user in
	 - Integrate LogIn and Register operations into the app
	 - design pagination on the question/topics
	 - Design the QuestionFull List and work on the Reply issue
	 - Finish design and check if all requirements are checked
